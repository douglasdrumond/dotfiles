# set your user tokens as enivornment variables, such as ~/.secrets
# See the README for examples.
[color]
    ui = auto
    diff        = auto
    status      = auto
    branch      = auto
    interactive = auto
[color "branch"]
    current = yellow reverse
    local   = yellow
    remote  = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old  = red bold
    new  = green bold
[color "status"]
    added     = green
    changed   = blue bold
    untracked = red
[core]
    editor       = vim
	excludesfile = ~/.gitignore
    pager        = less -FRSX
    quotepath    = false
	eol = lf
	autocrlf = input
[alias]
    # workflow
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive

    # add
    a         = add                           # add
    aa        = add -A
    chunkyadd = add --patch           # stage commits chunk by chunk

    # branch
    b  = branch -v                     # branch (verbose)
    br = branch
    bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
    bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

    # commit
    blame  = blame -C
    c      = commit -m      # commit with message
    ca     = commit -am     # commit all with message
    ci     = commit -sv     # commit
    amend  = commit --amend # ammend your last commit
    ammend = commit --amend # ammend your last commit
    cm = !git add -A && git commit -m
    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = commit -am "WIP" 

    # checkout
    co = checkout                     # checkout
    nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

    # cherry-pick
    cp = cherry-pick -x               # grab a change from a branch

    # diff
    d     = diff             # diff unstaged changes
    df    = diff
    dw    = diff --word-diff
    dc    = diff --cached    # diff staged changes
    last  = diff HEAD^       # diff last committed change
    today = diff --stat @{12am}..HEAD

    # log
    tree         = log --graph --decorate --pretty=format:'%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset' --abbrev-commit --date=relative
    l            = log --graph --date=short
    lg           = log --graph --decorate --pretty=format:'%C(magenta)%h%Creset -%C(red)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    lol          = log --graph --decorate --oneline
    lola         = log --graph --decorate --oneline --all
    changes      = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short        = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    changelog    = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
    show-graph   = log --graph --abbrev-commit --pretty=oneline

    standup = "!git log --since yesterday --author `git config user.email` --pretty=short"


    # config
    ec = config --global -e


    # pull
    pl     = pull
    ff     = merge --ff-only
    pullff = pull --ff-only
    noff   = merge --no-ff
    fa     = fetch --all
    purr = pull --rebase


    # push
    ps  = push                         # push
    pom = push origin master
    pod = push origin dev

    # rebase
    ready = rebase -i @{u}
    rc = rebase --continue            # continue rebase
    rs = rebase --skip                # skip rebase
    eject=!git reset --hard && git checkout master && git rebase --abort

    # remote
    r = remote -v                     # show remotes (verbose)

    # reset
    unstage  = reset HEAD         # remove files from index (tracking)
    uncommit = reset --soft HEAD^ # go back before last commit, with files in uncommitted state
    filelog  = log -u             # show changes to a file
    mt       = mergetool          # fire up the merge tool
    undo = reset HEAD~1 --mixed
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

    # stash
    ss = stash                        # stash changes
    sl = stash list                   # list stashes
    sa = stash apply                  # apply stash (restore changes)
    sd = stash drop                   # drop stashes (destory changes)

    # status
    s    = status     # status
    sb   = status -sb
    st   = status     # status
    stat = status     # status

    # tag
    t = tag -n                        # show tags with <n> lines of each tag message

    # svn helpers
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    # Divergence (commits we added and commits remote added)
    div = divergence

    # Goodness (summary of diff lines added/removed/total)
    gn  = goodness
    gnc = goodness --cached

    untracked = ls-files -o --exclude-standard
    ignored   = ls-files --others -i --exclude-standard
    modified  = ls-files -m

    todo      = !git grep --color=always --no-index --exclude-standard --heading --break --ignore-case -e ' FIX: *' -e ' TODO: *' | sed -e 's/^[[:space:]]*//'
    g = grep --break --heading --line-number

#[format]
#  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
    prompt = false
[mergetool "mvimdiff"]
    cmd        = "mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
    keepbackup = false
[merge]
    summary   = true
    verbosity = 1
    prompt    = false
    #tool      = Kaleidoscope
    #tool     = mvimdiff
    tool     = sourcetree
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[mergetool "Kaleidoscope"]
    cmd           = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    trustExitCode = true
[credential]
    helper = cache
#    helper = osxkeychain
[apply]
    whitespace = nowarn
[branch]
    autosetupmerge  = true
    autosetuprebase = always
[branch "master"]
    rebase = true
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
    default = tracking
#[advice]
#  statusHints = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true
    tool           = Kaleidoscope
[difftool]
    prompt = false
[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
    enabled = true
[interactive]
    singlekey = true
[achievement]
    upload = true
[user]
    name = Douglas Drumond
    email = douglas@cafelinear.com
[grep]
    extendRegexp = true
    lineNumber = true
[github]
    user = douglasdrumond
[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f
