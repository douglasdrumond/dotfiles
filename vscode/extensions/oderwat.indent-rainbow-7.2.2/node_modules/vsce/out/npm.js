"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var cp = require("child_process");
function parseStdout(_a) {
    var stdout = _a.stdout;
    return stdout.split(/[\r\n]/).filter(function (line) { return !!line; })[0];
}
function exec(command, options, cancellationToken) {
    if (options === void 0) { options = {}; }
    return new Promise(function (c, e) {
        var disposeCancellationListener = null;
        var child = cp.exec(command, __assign({}, options, { encoding: 'utf8' }), function (err, stdout, stderr) {
            if (disposeCancellationListener) {
                disposeCancellationListener();
                disposeCancellationListener = null;
            }
            if (err) {
                return e(err);
            }
            c({ stdout: stdout, stderr: stderr });
        });
        if (cancellationToken) {
            disposeCancellationListener = cancellationToken.subscribe(function (err) {
                child.kill();
                e(err);
            });
        }
    });
}
function checkNPM(cancellationToken) {
    return exec('npm -v', {}, cancellationToken).then(function (_a) {
        var stdout = _a.stdout;
        var version = stdout.trim();
        if (/^3\.7\.[0123]$/.test(version)) {
            return Promise.reject("npm@" + version + " doesn't work with vsce. Please update npm: npm install -g npm");
        }
    });
}
function getDependencies(cwd) {
    return checkNPM()
        .then(function () { return exec('npm list --production --parseable --depth=99999', { cwd: cwd }); })
        .then(function (_a) {
        var stdout = _a.stdout;
        return stdout
            .split(/[\r\n]/)
            .filter(function (dir) { return path.isAbsolute(dir); });
    });
}
exports.getDependencies = getDependencies;
function getLatestVersion(name, cancellationToken) {
    return checkNPM(cancellationToken)
        .then(function () { return exec("npm show " + name + " version", {}, cancellationToken); })
        .then(parseStdout);
}
exports.getLatestVersion = getLatestVersion;

//# sourceMappingURL=npm.js.map
