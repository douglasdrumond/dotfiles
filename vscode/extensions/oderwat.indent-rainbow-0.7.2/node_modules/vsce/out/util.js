"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _read = require("read");
var WebApi_1 = require("vso-node-api/WebApi");
var denodeify = require("denodeify");
var __read = denodeify(_read);
function read(prompt, options) {
    if (options === void 0) { options = {}; }
    return __read(__assign({ prompt: prompt }, options));
}
exports.read = read;
function getGalleryAPI(pat) {
    var authHandler = WebApi_1.getBasicHandler('oauth', pat);
    var vsoapi = new WebApi_1.WebApi('oauth', authHandler);
    return vsoapi.getGalleryApi('https://marketplace.visualstudio.com');
}
exports.getGalleryAPI = getGalleryAPI;
function normalize(path) {
    return path.replace(/\\/g, '/');
}
exports.normalize = normalize;
function chain2(a, b, fn, index) {
    if (index === void 0) { index = 0; }
    if (index >= b.length) {
        return Promise.resolve(a);
    }
    return fn(a, b[index]).then(function (a) { return chain2(a, b, fn, index + 1); });
}
function chain(initial, processors, process) {
    return chain2(initial, processors, process);
}
exports.chain = chain;
function flatten(arr) {
    return [].concat.apply([], arr);
}
exports.flatten = flatten;
var CancelledError = 'Cancelled';
function isCancelledError(error) {
    return error === CancelledError;
}
exports.isCancelledError = isCancelledError;
var CancellationToken = /** @class */ (function () {
    function CancellationToken() {
        this.listeners = [];
        this._cancelled = false;
    }
    Object.defineProperty(CancellationToken.prototype, "isCancelled", {
        get: function () { return this._cancelled; },
        enumerable: true,
        configurable: true
    });
    CancellationToken.prototype.subscribe = function (fn) {
        var _this = this;
        this.listeners.push(fn);
        return function () {
            var index = _this.listeners.indexOf(fn);
            if (index > -1) {
                _this.listeners.splice(index, 1);
            }
        };
    };
    CancellationToken.prototype.cancel = function () {
        var emit = !this._cancelled;
        this._cancelled = true;
        if (emit) {
            this.listeners.forEach(function (l) { return l(CancelledError); });
            this.listeners = [];
        }
    };
    return CancellationToken;
}());
exports.CancellationToken = CancellationToken;

//# sourceMappingURL=util.js.map
